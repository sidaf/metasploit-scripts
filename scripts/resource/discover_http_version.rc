<ruby>
  #
  # Helper functions
  #

  def jobwaiting(maxjobs=10) #thread handling for poor guys ...
    while(framework.jobs.keys.length >= maxjobs)
      ::IO.select(nil, nil, nil, 2.5)
      #print_error("waiting for finishing some modules... active jobs: #{framework.jobs.keys.length} / threads: #{framework.threads.length}")
    end
  end

  #
  # Main
  #

	# Check if we have a database connected
	begin
		framework.db.hosts
	rescue ::ActiveRecord::ConnectionNotEstablished
		print_error("Database connection isn't established")
		return
	end

  # Check the global datastore for a VERBOSE option and use it
  if (framework.datastore['VERBOSE'] == "true")	
	  verbose = 1
  else
	  verbose = 0
  end

  http_services = ['http', 'alt-http', 'http-proxy']
  https_services = ['https', 'ssl/https', 'ssl/http' , 'alt-https', 'ssl/http-proxy', 'ssl/upnp']

	framework.db.workspace.hosts.each do |host|
		host.services.each do |service|
			next if not service.host
			next if not service.state == 'open'
      next if not http_services.include?(service.name) and not https_services.include?(service.name)

      print_status("Starting http_version discovery on #{host.address}:#{service.port}/#{service.proto}")


      run_single("use auxiliary/scanner/http/http_version")
      run_single("set RHOSTS #{host.address}")
      run_single("set RPORT #{service.port.to_i}")
      if (https_services.include? service.name)
        run_single("set SSL true")
      else
        run_single("set SSL false")
      end
      if (verbose == 1)
        run_single("set VERBOSE true")
      else
        run_single("set VERBOSE false")
      end
      run_single("set ShowProgress false")
      run_single("run -j")
      run_single("back")

      jobwaiting()
		end
	end
</ruby>
