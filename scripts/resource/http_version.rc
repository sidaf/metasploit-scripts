<ruby>
	####################
	# Helper functions #
	####################

	def run_auxiliary_module(mod, opts, as_job: false, quiet: false, dry_run: false)
		m = framework.auxiliary.create(mod)
		unless m.nil?
			opts.each do |o, v|
				m.datastore[o] = v
			end
			m.options.validate(m.datastore)
			if not dry_run
				m.run_simple(
					'LocalInput' => self.input,
					'LocalOutput' => self.output,
					'RunAsJob' => as_job,
					'Quiet' => quiet
				)
			else
				print_status("Would run module 'auxiliary/#{mod}' against:")
				print_line("RHOSTS: #{opts['RHOSTS']}")
				print_line("RPORT: #{opts['RPORT']}")
				print_line("SSL: #{opts['SSL']}")
				print_line
			end
		else
			print_error("module auxiliary/#{mod} does not exist")
		end
	end

	########
	# Main #
	########

	print_line
	print_line("-----===[ auxiliary/scanner/http/http_version ]===-----")

	# Check if we have a database connection
	if framework.db.nil? or not framework.db.active
		print_error('Database not connected (try db_connect)')
		return
	end

	# Define http[s] services
	services     = ['http', 'alt-http', 'http-alt', 'http-proxy']
	ssl_services = ['https', 'ssl/https', 'ssl/http', 'alt-https', 'https-alt', 'ssl/http-proxy', 'ssl/upnp', 'https-proxy', 'ssl/https-alt', 'ssl/blackice-icecap']

	# Get a list of target services
	targets = []
	framework.db.services.each do |service|
		next unless service.host and service.state.eql? 'open' and service.proto.eql? 'tcp'
		next if not services.include?(service.name) and not ssl_services.include?(service.name)

		targets << { :ip => service.host.address, :port => service.port, :ssl => ssl_services.include?(service.name) ? true : false }
	end

	if targets.empty?
		print_warning "No targets found."
	else
		# Setup the module
		mod = "scanner/http/http_version"
		progress = false
		verbose = false

		# Group common options and run module against each group
		groups = targets.group_by { |t| t[:port].to_s + ':' + t[:ssl].to_s }
		groups.each_value do |group|
			rhosts = (group.map { |t| t[:ip] }).join(" ")
			rport = group[0][:port]
			ssl = group[0][:ssl]

			opts = { 'ShowProgress' => progress, 'VERBOSE' => verbose, 'RHOSTS' => rhosts, 'RPORT' => rport, 'SSL' => ssl }
			run_auxiliary_module(mod, opts)
		end
	end
</ruby>
